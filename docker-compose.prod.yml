version: "3.8"

services:
  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    container_name: sopa_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sopa_prod}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-sopa_prod}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sopa_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # FastAPI Application - Production
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sopa_api_prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sopa_prod}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      PROJECT_NAME: "SOPA API - Production"
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sopa_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for caching - Production
  redis:
    image: redis:7-alpine
    container_name: sopa_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - sopa_network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: sopa_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - sopa_network
    restart: always

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  sopa_network:
    driver: bridge
