generator client {
  provider                    = "prisma-client-py"
  enable_experimental_decimal = "true"
  recursive_type_depth        = "5"
  interface                   = "asyncio"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model academic_program {
  id               Int        @id @default(autoincrement())
  name             String     @db.VarChar(150)
  code             String     @db.VarChar(150)
  modalityAcademic String     @db.VarChar(150)
  headquarter      String     @db.VarChar(150)
  version          Int
  modalityId       Int
  facultyId        Int
  departmentId     Int
  department       department @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "departmentId")
  faculty          faculty    @relation(fields: [facultyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "facultyId")
  modality         modality   @relation(fields: [modalityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "modalityId")
  pensum           pensum[]
}

model academic_schedule {
  id                       Int                        @id @default(autoincrement())
  semester                 String                     @unique @db.VarChar(150)
  academic_schedule_pensum academic_schedule_pensum[]
}

model classroom {
  id                              Int                 @id @default(autoincrement())
  capacity                        Int?
  location                        String              @unique @db.VarChar(150)
  ownDepartment                   Boolean?            @default(false)
  virtualMode                     Boolean?
  enabled                         Boolean?            @default(true)
  isPointer                       Boolean?            @default(false)
  hasRoom                         Boolean?            @default(false)
  classroom_x_group_auxClassroom  classroom_x_group[] @relation("auxClassroom")
  classroom_x_group_mainClassroom classroom_x_group[] @relation("mainClassroom")
}

model classroom_x_group {
  id              Int        @id @default(autoincrement())
  groupId         Int
  auxClassroomId  Int?
  auxSchedule     String?    @db.VarChar(150)
  mainClassroomId Int
  mainSchedule    String     @db.VarChar(150)
  auxClassroom    classroom? @relation("auxClassroom", fields: [auxClassroomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "classroomId")
  group           group      @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "groupId")
  mainClassroom   classroom  @relation("mainClassroom", fields: [mainClassroomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "mainClassroomId")
}

model department {
  id               Int                @id @default(autoincrement())
  name             String?            @db.VarChar(150)
  internalKey      String?            @db.VarChar(150)
  academic_program academic_program[]
}

model faculty {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(150)
  internalKey      String?            @db.VarChar(150)
  academic_program academic_program[]
}

model group {
  id                       Int                       @id @default(autoincrement())
  groupSize                Int
  modality                 String                    @db.VarChar(150)
  code                     Int
  mirrorGroupId            Int?
  subjectId                Int
  academicSchedulePensumId Int
  maxSize                  Int
  registeredPlaces         Int
  classroom_x_group        classroom_x_group[]
  academic_schedule_pensum academic_schedule_pensum  @relation(fields: [academicSchedulePensumId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "academicSchedulePensumId")
  mirror_group             mirror_group?             @relation(fields: [mirrorGroupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "mirrorGroupId")
  subject                  subject                   @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subjectId")
  group_x_professor        group_x_professor[]
  message_classroom_group  message_classroom_group[]
}

model group_x_professor {
  id          Int       @id @default(autoincrement())
  groupId     Int
  professorId Int
  group       group     @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "groupId")
  professor   professor @relation(fields: [professorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "professorId")
}

model mirror_group {
  id    Int     @id @default(autoincrement())
  name  String? @db.VarChar(150)
  group group[]
}

model modality {
  id               Int                @id @default(autoincrement())
  IDE              String?            @db.VarChar(150)
  name             String             @db.VarChar(150)
  academic_program academic_program[]
}

model pensum {
  id                       Int                        @id @default(autoincrement())
  version                  Int
  academicProgramId        Int
  academic_schedule_pensum academic_schedule_pensum[]
  academic_program         academic_program           @relation(fields: [academicProgramId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "academicProgramId")
  subject                  subject[]
}

model prerequirement {
  id        Int     @id @default(autoincrement())
  code      String  @db.VarChar(150)
  subjectId Int
  subject   subject @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subjectId")
}

model professor {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(150)
  identification    String?             @unique @db.VarChar(150)
  group_x_professor group_x_professor[]
}

model subject {
  id                 Int              @id @default(autoincrement())
  level              Int
  fields             Json             @db.Json
  code               String           @db.VarChar(150)
  credits            Int
  weeklyHours        Int
  weeks              Int
  validable          Boolean?         @default(false)
  enableable         Boolean?         @default(false)
  coRequirements     String?          @db.VarChar(150)
  creditRequirements String?          @db.VarChar(150)
  name               String           @db.VarChar(150)
  pensumId           Int
  group              group[]
  prerequirement     prerequirement[]
  pensum             pensum           @relation(fields: [pensumId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pensumId")
}

model academic_schedule_pensum {
  id                 Int               @id @default(autoincrement())
  pensumId           Int
  academicScheduleId Int
  academic_schedule  academic_schedule @relation(fields: [academicScheduleId], references: [id])
  pensum             pensum            @relation(fields: [pensumId], references: [id])
  group              group[]
}

model message_classroom_group {
  id            Int          @id @default(autoincrement())
  messageTypeId Int
  detail        String?      @db.VarChar
  groupId       Int
  group         group        @relation(fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "groupId")
  messageType  message_type @relation(fields: [messageTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "messageTypeId")
}

model message_type {
  id                      Int                       @id(map: "conflict_type_pkey") @default(autoincrement())
  name                    String                    @db.VarChar(150)
  message_classroom_group message_classroom_group[]
}
